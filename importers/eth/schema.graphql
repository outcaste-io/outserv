type Txn {
  Oid: ID!
  Hash: String! @id
  Value: Int64 @search
  Block: Int64 @search
  To: Account @hasInverse(field: Incoming)
  From: Account @hasInverse(field: Outgoing)
}

type Account {
  Oid: ID!
  Hash: String! @id
  Incoming: [Txn]
  Outgoing: [Txn]
}

type AccountBal @remote {
  Value: Int64
}

type Query {

  queryAccountBalanceAtBlockNo: AccountBal @custom(dql: """
query {
  var(func: has(Account.Hash), first: 1) {
    Account.Outgoing { outv as Txn.Value }
    Account.Incoming { inv as Txn.Value }
  }
  queryAccountBalanceAtBlockNo() {
    out as sum(val(outv))
    in as sum(val(inv))
    Value: math(in - out)
  }
}
""")

}
