// Portions Copyright 2017 Dgraph Labs, Inc. are available under the Apache License v2.0.
// Portions Copyright 2022 Outcaste LLC are available under the Sustainable License v1.0.

// Style guide for Protocol Buffer 3.
// Use CamelCase (with an initial capital) for message names – for example,
// SongServerRequest. Use underscore_separated_names for field names – for
// example, song_name.

syntax = "proto3";

package pb;

import "github.com/outcaste-io/outserv/badger/pb/pb.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

/* import "gogoproto/gogo.proto"; */

/* option (gogoproto.marshaler_all) = true; */
/* option (gogoproto.sizer_all) = true; */
/* option (gogoproto.unmarshaler_all) = true; */
/* option (gogoproto.goproto_getters_all) = true; */

message List {
  /* repeated fixed64 uids = 1; *1/ */
  bytes bitmap = 2;
  repeated fixed64 sortedUids = 3;
}

message TaskValue {
  bytes val = 1;
}

message SrcFunction {
  string name = 1;
  repeated string args = 3;
  bool isCount = 4;
}

message Query {
  string attr = 1;
  fixed64 after_uid = 3;      // Only return UIDs greater than this.
  bool do_count = 4;          // Are we just getting lengths?

  // Exactly one of uids and terms is populated.
  List uid_list = 5;

  // Function to generate or filter UIDs.
  SrcFunction src_func = 6;

  // Expand all language variants.
  bool expand_all = 10;

  uint64 read_ts = 13;
  uint64 cache_ts = 14;
  // Used to limit the number of result. Typically, the count is value of first
  // field. Now, It's been used only for has query.
  int32 first = 15;
  // Offset helps in fetching lesser results for the has query when there is no
  // filter and order.
  int32 offset = 16;
}

message ValueList {
  repeated TaskValue values = 1;
}

message Result {
  repeated List uid_matrix = 1;
  repeated ValueList value_matrix = 2;
  repeated uint32 counts = 3;
  bool intersect_dest = 4;
  bool list = 7;
}

message Order {
  string attr = 1;
  bool desc = 2;
}

message SortMessage {
  repeated Order order = 1;
  repeated List uid_matrix = 2;
  int32 count = 3;   // Return this many elements.
  int32 offset = 4;  // Skip this many elements.

  uint64 read_ts = 13;
}

message SortResult {
  repeated List uid_matrix = 1;
}

message RaftContext {
  string who_is = 1;
  fixed64 id = 2;
  uint32 group = 3;
  string addr = 4;
  uint64 snapshot_ts = 5;
  bool is_learner = 6;
}

// Member stores information about RAFT group member for a single RAFT node.
// Note that each server can be serving multiple RAFT groups. Each group would
// have one RAFT node per server serving that group.
message Member {
  fixed64 id = 1;
  uint32 group_id = 2 [(gogoproto.jsontag) = "groupId,omitempty"];
  string addr = 3;
  bool leader = 4;
  bool am_dead = 5 [(gogoproto.jsontag) = "amDead,omitempty"];
  uint64 last_update = 6 [(gogoproto.jsontag) = "lastUpdate,omitempty"];
  bool learner = 7;
}

message ZeroProposal {
  map<uint32, uint64> snapshot_ts = 1;  // Group ID -> Snapshot Ts.
  Member member = 2;
  repeated Tablet tablets = 3;

  uint32 num_uids = 4;
  uint32 num_nsids = 5;

  string cid = 6;  // Used as unique identifier for the cluster.
  DeleteNsRequest delete_ns = 7;  // Used to delete namespace.
  double cpu_hours = 8; // Tracks CPU hours used by the cluster.
  int64 last_charged = 9; // When did we last charge, in unix epoch seconds.
}

// MembershipState is used to pack together the current membership state of all
// the nodes in the caller server; and the membership updates recorded by the
// callee server since the provided lastUpdate.
message MembershipState {
  map<uint64, Member> members = 1;
  map<string, Tablet> tablets = 2;
  repeated uint64 removed = 3; // Raft IDs of removed members.

  uint64 raft_index = 5;
  uint64 maxUID = 6;
  uint64 maxNsID = 7;
  string cid = 8;  // Used to uniquely identify the Dgraph cluster.
  double cpu_hours = 9; // Tracks CPU hours used by the cluster.
  int64 last_charged = 10; // When did we last charge, in unix epoch seconds.
}

message HealthInfo {
  string instance = 1;
  string address = 2;
  string status = 3;
  string group = 4;  // string so group = 0 can be printed in JSON.
  string version = 5;
  int64 uptime = 6;
  int64 lastEcho = 7;
  uint64 read_ts = 8;
  repeated string ongoing = 9;
  repeated string indexing = 10;
}

message Tablet {
  // Served by which group.
  uint32 group_id = 1 [(gogoproto.jsontag) = "groupId,omitempty"];
  string predicate = 2;
  bool remove = 3;
  // If true, do not ask zero to serve any tablets.
  bool read_only = 4 [(gogoproto.jsontag) = "readOnly,omitempty"];
  uint64 move_ts = 5 [(gogoproto.jsontag) = "moveTs,omitempty"];
  // Estimated uncompressed size of tablet in bytes
  int64 on_disk_bytes = 6;
  int64 uncompressed_bytes = 7;
}

message Object {
  string var = 1;
  uint64 uid = 2;
  repeated Edge edges = 3;
}

message Mutations {
  uint32 group_id = 1;
  repeated Object new_objects = 2;
  repeated Edge edges = 3;
  repeated SchemaUpdate schema = 5;
  enum DropOp {
    NONE = 0;
    ALL = 1;
    DATA = 2;
  }
  DropOp drop_op = 8;
  string drop_value = 9;
}

message Snapshot {
  RaftContext context = 1;
  uint64 index = 2;
  uint64 base_ts = 3;
  // done is used to indicate that snapshot stream was a success.
  bool done = 4;
  // since_ts stores the ts of the last snapshot to support diff snap updates.
  uint64 since_ts = 5;
}

message ZeroSnapshot {
  uint64 index = 1;
  uint64 checkpoint_ts = 2;
  MembershipState state = 5;
}

message Proposal {
  // These following are used during processing.
  uint64 index = 1;      // Used to store Raft index, in raft.Ready.
  uint64 key = 2;
  uint64 commit_ts = 3;
  int64 entry_size = 4;

  uint64 base_timestamp = 5; // Use this timestamp to derive commit timestamps.
  Mutations mutations = 6;
  repeated badgerpb3.KV kv = 7;

  // Delete the predicate which was moved to other group.
  string clean_predicate = 8;
  Snapshot snapshot = 9;  // Used to tell the group when to take snapshot.
  // Block an operation until membership reaches this checksum.
  uint64 expected_checksum = 10;
  CDCState cdc_state = 11;
  DeleteNsRequest delete_ns = 12;  // Used to delete namespace.
}

message CDCState {
  uint64 sent_ts = 1;
}

message KVS {
  bytes data = 5;

  // Done used to indicate if the stream of KVS is over.
  bool done = 2;
  // Predicates is the list of predicates known by the leader at the time of the
  // snapshot.
  repeated string predicates = 3;
}

// Posting messages.
message Posting {
  fixed64 uid = 1;
  bytes value = 2;
  enum PostingType {
    REF = 0;         // UID
    VALUE = 1;       // simple, plain value
  }
  PostingType posting_type = 4;

  // TODO: op is only used temporarily. See if we can remove it from here.
  uint32 op = 12;
  uint64 start_ts = 13;   // Meant to use only inmemory
  uint64 commit_ts = 14;  // Meant to use only inmemory
}

message PostingList {
  reserved 1;  // It was used for UidPack.
  repeated Posting postings = 2;
  uint64 commit_ts = 3;  // More inclination towards smaller values.

  repeated uint64 splits = 4;

  bytes bitmap = 5;  // Roaring Bitmap encoded uint64s.
}

message Function {
  string name = 1;           // Name of the function : eq, le
  string key = 2;            // Facet key over which to run the function.
  repeated string args = 3;  // Arguments of the function.
}

// Op and Children are internal nodes and Func on leaves.
message FilterTree {
  string op = 1;
  repeated FilterTree children = 2;
  Function func = 3;
}

// Schema messages.
message SchemaRequest {
  uint32 group_id = 1;
  repeated string predicates = 2;
  // Fields can be on of type, index, or tokenizer.
  repeated string fields = 3;

  repeated string types = 4;
}

message SchemaNode {
  string predicate = 1;
  string type = 2;
  bool index = 3;
  repeated string tokenizer = 4;
  bool count = 6;
  bool list = 7;
  bool upsert = 8;
}

message SchemaResult {
  repeated SchemaNode schema = 1 [deprecated = true];
}

message SchemaUpdate {
  string predicate = 1;
  int32 value_type = 2;
  enum Directive {
    NONE = 0;
    INDEX = 1;
    DELETE = 3;
  }
  Directive directive = 3;
  repeated string tokenizer = 4;
  bool count = 5;
  bool list = 6;
  bool upsert = 7;

  // Deleted field:
  reserved "explicit";
}

message MapHeader {
  repeated bytes partition_keys = 1;
}

message MovePredicatePayload {
  string predicate = 1;
  uint32 source_gid = 2;
  uint32 dest_gid = 3;
  uint64 read_ts = 4;
  uint64 expected_checksum = 5;
  uint64 since_ts = 6;
}

message PeerResponse {
  bool status = 1;
}

message RaftBatch {
  RaftContext context = 1;
  Payload payload = 2;
}

/* The following are from api.proto */

message Payload {
  bytes Data = 1;
}

message TxnContext {
  uint64 start_ts = 1;
  // uids contains a mapping of blank_node => uid for the node. It only returns uids
  // that were created as part of a mutation.
  map<string, string> uids = 2;
  string hash = 6;
}

message Request {
  uint64 start_ts = 1;

  string query = 4;
  map<string, string> vars = 5; // Support for GraphQL like variables.
  bool read_only = 6;
  bool best_effort = 7;

  repeated Mutation mutations = 12;
  bool commit_now = 13;
  enum RespFormat {
    JSON = 0;
    RDF = 1;
  }
  RespFormat resp_format = 14;
  string hash = 15;
}

message Uids {
  repeated string uids = 1;
}

message ListOfString {
    repeated string value = 1;
}

message Response {
  bytes json = 1;
  TxnContext txn = 2;
  Latency latency = 3;
  // Metrics contains all metrics related to the query.
  Metrics metrics = 4;
  bytes rdf = 13;
  map<string, ListOfString> hdrs = 14;
}

message Mutation {
  bytes set_json = 1;
  bytes delete_json = 2;
  repeated Edge edges = 3;

  // This is being used for upserts.
  string cond = 9;

  // This field is a duplicate of the one in Request and placed here for convenience.
  bool commit_now = 14;
}

message Operation {
  string schema = 1;
  string drop_attr = 2;
  bool drop_all = 3;

  enum DropOp {
    NONE = 0;
    ALL = 1;
    DATA = 2;
    ATTR = 3;
  }
  DropOp drop_op = 4;

  // If drop_op is ATTR or TYPE, drop_value holds the name of the predicate or
  // type to delete.
  string drop_value = 5;

  // run indexes in background.
  bool run_in_background = 6;
}

message Check {}

message Version {
  string tag = 1;
}

message Latency {
  uint64 parsing_ns = 1;
  uint64 processing_ns = 2;
  uint64 encoding_ns = 3;
  uint64 assign_timestamp_ns = 4;
  uint64 total_ns = 5;
}

message Metrics {
  // num_uids is the map of number of uids processed by each attribute.
  map<string, uint64> num_uids = 1;
}

message Edge {
  string subject = 1;
  string predicate = 2;
  string object_id = 3;
  bytes object_value = 4;
  uint64 namespace = 5;

  enum Op {
    SET = 0;
    DEL = 1;
  }
  Op op = 6;
}

message LoginRequest {
  string userid = 1;
  string password = 2;
  string refresh_token = 3;
  uint64 namespace = 4;
}

message Jwt {
  string access_jwt = 1;
  string refresh_jwt = 2;
}

/* End of api.proto */

service Raft {
  rpc Heartbeat(Payload) returns (stream HealthInfo) {}
  rpc RaftMessage(stream RaftBatch) returns (Payload) {}
  rpc JoinCluster(RaftContext) returns (Payload) {}
  rpc IsPeer(RaftContext) returns (PeerResponse) {}
}

service Worker {
  // Data serving RPCs.
  rpc Mutate(Mutations) returns (TxnContext) {}
  rpc ServeTask(Query) returns (Result) {}
  rpc StreamSnapshot(stream Snapshot) returns (stream KVS) {}
  rpc Sort(SortMessage) returns (SortResult) {}
  rpc Schema(SchemaRequest) returns (SchemaResult) {}
  rpc Export(ExportRequest) returns (ExportResponse) {}
  rpc ReceivePredicate(stream KVS) returns (Payload) {}
  rpc MovePredicate(MovePredicatePayload) returns (Payload) {}
  rpc Subscribe(SubscriptionRequest) returns (stream badgerpb3.KVList) {}
  rpc UpdateGraphQLSchema(UpdateGraphQLSchemaRequest) returns (UpdateGraphQLSchemaResponse) {}
  rpc DeleteNamespace(DeleteNsRequest) returns (Status) {}
  rpc TaskStatus(TaskStatusRequest) returns (TaskStatusResponse) {}
}

message TabletResponse {
  repeated Tablet tablets = 1;
}
message TabletRequest {
  repeated Tablet tablets = 1;
  uint32 group_id = 2 [(gogoproto.jsontag) = "groupId,omitempty"];  // Served by which group.
}

message SubscriptionRequest {
  repeated bytes prefixes = 1;
  repeated badgerpb3.Match matches = 2;
}

message SubscriptionResponse {
  badgerpb3.KVList kvs = 1;
}

message Num {
  uint64 val = 1;
  bool read_only = 2;
  bool forwarded = 3;  // True if this request was forwarded by a peer.
  // If bump is set to true then we bump the lease to val. If false, we assign new ids with count
  // equal to val.
  bool bump = 5;
  enum leaseType {
    NS_ID = 0;
    UID = 1;
    UNUSED = 2;
  }
  leaseType type = 4;
}

message AssignedIds {
  uint64 startId = 1;
  uint64 endId = 2;

  // The following is used for read only transactions.
  uint64 read_only = 5;
}

message RemoveNodeRequest {
  uint64 nodeId = 1;
  uint32 groupId = 2;
}

message MoveTabletRequest {
  uint64 namespace = 1;
  string tablet = 2;
  uint32 dstGroup = 3;
}

message SnapshotMeta {
  uint64 client_ts = 1;
  uint32 group_id = 2;
}

// Status describes a general status response.
// code: 0 = success, 0 != failure.
message Status {
  int32 code = 1;
  string msg = 2;
}

message ExportRequest {
  uint32 group_id = 1;  // Group id to back up.
  uint64 read_ts = 2;
  int64 unix_ts = 3;
  string format = 4;

  string destination = 5;

  // These credentials are used to access the S3 or minio bucket.
  string access_key = 6;
  string secret_key = 7;
  string session_token = 8;
  bool anonymous = 9;

  uint64 namespace = 10;
}

message ExportResponse {
  // 0 indicates a success, and a non-zero code indicates failure
  int32 code = 1;
  string msg = 2;
  repeated string files = 3;
}

message UpdateGraphQLSchemaRequest {
  enum Op {
    SCHEMA = 0;
    SCRIPT = 1;
  }
  uint64 start_ts = 1;
  string graphql_schema = 2;
  repeated SchemaUpdate dgraph_preds = 3;
  string lambda_script = 5;
  Op op = 6;
}

message UpdateGraphQLSchemaResponse {
  uint64 uid = 1;
}

// BulkMeta stores metadata from the map phase of the bulk loader.
message BulkMeta {
  int64 edge_count = 1;
  map<string, SchemaUpdate> schema_map = 2;
}

message DeleteNsRequest {
  uint32 group_id = 1;
  uint64 namespace = 2;
}

message TaskStatusRequest {
  uint64 task_id = 1;
}

message TaskStatusResponse {
  uint64 task_meta = 1;
}

// vim: expandtab sw=2 ts=2
